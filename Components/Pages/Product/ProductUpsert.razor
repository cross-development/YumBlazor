@page "/product/create"
@page "/product/update/{id:int}"

@using YumBlazor.Data.Entities

@inject NavigationManager NavigationManager
@inject IProductRepository ProductRepository
@inject IJSRuntime JsRuntime

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ms-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id > 0 ? "Create" : "Update") Product</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            <EditForm Model="Product" FormName="ProductUpsertForm" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />

                <div class="border p-3 mt-4">
                    <div class="form-floating" p-3 col-12>
                        <InputText @bind-Value="Product.Name" class="form-control" id="Name" placeholder="Name" />
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(() => Product.Name)" />
                    </div>

                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-floppy2-fill"></i> Save
                            </button>
                        </div>

                        <div class="col-6 col-md-3">
                            <a href="product" class="btn btn-secondary form-control" disabled="@IsProcessing">
                                <i class="bi bi-arrow-bar-left"></i> Back to List
                            </a>
                        </div>
                    </div>
                </div>

            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product();

    private bool IsProcessing { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();

            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProduct()
    {
        if (Id > 0)
        {
            Product = await ProductRepository.GetAsync(Id);
        }
    }

    private async Task UpsertProduct()
    {
        IsProcessing = true;

        if (Product.Id == 0)
        {
            // Create
            await ProductRepository.CreateAsync(Product);
            await JsRuntime.ToasrtSuccess("Product has been successfully created!");
        }
        else
        {
            // Update
            await ProductRepository.UpdateAsync(Product);
            await JsRuntime.ToasrtSuccess("Product has been successfully updated!");
        }

        IsProcessing = false;

        NavigationManager.NavigateTo("product");
    }
}
